import json
import logging
import base64
import os
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8295792965:AAFCOTaWj0vDhS1XfTP8MQ0Ip9gMundUxKw"
ADMIN_ID = 481076515
FILMS_FILE = "films.json"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ó–ê–ì–†–£–ó–ö–ê/–°–û–•–†–ê–ù–ï–ù–ò–ï –§–ò–õ–¨–ú–û–í ===
def load_films():
    try:
        with open(FILMS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_films(films):
    with open(FILMS_FILE, "w", encoding="utf-8") as f:
        json.dump(films, f, ensure_ascii=False, indent=2)
    commit_films_to_github()  # –∫–æ–º–º–∏—Ç–∏–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è

# === –ö–û–ú–ú–ò–¢ –ù–ê GITHUB ===
def commit_films_to_github():
    repo = os.environ.get("GITHUB_REPO")
    branch = os.environ.get("GITHUB_BRANCH", "main")
    token = os.environ.get("GITHUB_TOKEN")
    if not all([repo, token]):
        logger.warning("GitHub –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã, –∫–æ–º–º–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return

    with open(FILMS_FILE, "r", encoding="utf-8") as f:
        content = f.read()

    url_get = f"https://api.github.com/repos/{repo}/contents/{FILMS_FILE}?ref={branch}"
    headers = {"Authorization": f"token {token}"}
    r = requests.get(url_get, headers=headers)
    sha = r.json().get("sha") if r.status_code == 200 else None

    data = {
        "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ films.json —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
        "content": base64.b64encode(content.encode()).decode(),
        "branch": branch
    }
    if sha:
        data["sha"] = sha

    r2 = requests.put(url_get, headers=headers, json=data)
    if r2.status_code in [200, 201]:
        logger.info("–§–∏–ª—å–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã –Ω–∞ GitHub")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞: {r2.text}")

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ.",
        reply_markup=reply_markup
    )

# === /list –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
async def list_films(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    films = load_films()
    if not films:
        await update.message.reply_text("üéû –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.")
        return
    msg = "üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:\n\n"
    for code, film in films.items():
        msg += f"{code} ‚Äî {film.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    await update.message.reply_text(msg)

# === /add <–∫–æ–¥> <–Ω–∞–∑–≤–∞–Ω–∏–µ> ===
async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∫–æ–¥> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    code = args[0]
    title = " ".join(args[1:])
    context.user_data["add_code"] = code
    context.user_data["add_title"] = title
    await update.message.reply_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ '{title}'")

# === /del <–∫–æ–¥> ===
async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        return
    code = args[0]
    films = load_films()
    if code in films:
        films.pop(code)
        save_films(films)
        await update.message.reply_text(f"–§–∏–ª—å–º —Å –∫–æ–¥–æ–º {code} —É–¥–∞–ª—ë–Ω ‚úÖ")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    films = load_films()

    if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (3‚Äì5 —Ü–∏—Ñ—Ä):")
        return

    if text.isdigit():
        if text in films:
            film = films[text]
            source = film.get("file_id") or film.get("url")
            caption = film.get("title", f"–§–∏–ª—å–º {text}")
            if not source:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞
            try:
                await update.message.reply_video(video=source, caption=caption)
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞")
        else:
            await update.message.reply_text("–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
    else:
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ—á–∏—Å–ª–æ–≤–æ–π —Ç–µ–∫—Å—Ç
        return

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–¥–ª—è /add) ===
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    code = context.user_data.get("add_code")
    title = context.user_data.get("add_title")
    if not code or not title:
        return
    file_id = update.message.video.file_id
    films = load_films()
    films[code] = {"title": title, "file_id": file_id}
    save_films(films)
    await update.message.reply_text(f"–§–∏–ª—å–º '{title}' —Å –∫–æ–¥–æ–º {code} –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
    context.user_data.pop("add_code")
    context.user_data.pop("add_title")

# === –ó–ê–ü–£–°–ö ===
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("list", list_films))
app.add_handler(CommandHandler("add", add_command))
app.add_handler(CommandHandler("del", del_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
app.add_handler(MessageHandler(filters.VIDEO, handle_video))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
