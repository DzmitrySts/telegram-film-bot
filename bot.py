#!/usr/bin/env python3
import os
import json
import logging
import base64
import requests
import datetime
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import Conflict
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
TOKEN = os.environ.get("TELEGRAM_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "481076515"))
FILMS_FILE = "films.json"
USERS_FILE = "users.json"

GITHUB_REPO = os.environ.get("GITHUB_REPO")
GITHUB_BRANCH = os.environ.get("GITHUB_BRANCH", "main")
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")

# –û–¥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
REQUIRED_CHANNELS = [
    ("@offmatch", "Offmatch")
]

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –†–∞–±–æ—Ç–∞ —Å JSON-—Ñ–∞–π–ª–∞–º–∏ ==========
def load_json(filename):
    try:
        p = Path(filename)
        if not p.exists():
            p.write_text("{}", encoding="utf-8")
            return {}
        with p.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        logger.exception(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}")
        return {}

def save_json(filename, data):
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {filename}")
        return
    commit_to_github(filename)

# ========== –ö–æ–º–º–∏—Ç –≤ GitHub ==========
def commit_to_github(filename):
    if not all([GITHUB_REPO, GITHUB_TOKEN]):
        logger.warning("‚ùó GitHub –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∫–æ–º–º–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
        return
    try:
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read()

        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{filename}?ref={GITHUB_BRANCH}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}

        r = requests.get(url, headers=headers)
        sha = r.json().get("sha") if r.status_code == 200 else None

        payload = {
            "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {filename} —á–µ—Ä–µ–∑ –±–æ—Ç",
            "content": base64.b64encode(content.encode()).decode(),
            "branch": GITHUB_BRANCH,
        }
        if sha:
            payload["sha"] = sha

        resp = requests.put(url, headers=headers, json=payload)
        if resp.status_code in (200, 201):
            logger.info(f"‚úÖ –ö–æ–º–º–∏—Ç {filename} –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ {filename}: {resp.text}")
    except Exception:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ {filename}")

# ========== –†–∞–±–æ—Ç–∞ —Å users.json ==========
def load_users():
    return load_json(USERS_FILE)

def save_users(users: dict):
    save_json(USERS_FILE, users)

def add_user(user_id, username=None, first_name=None):
    users = load_users()
    uid = str(user_id)
    now = datetime.datetime.now(datetime.timezone.utc).isoformat()

    if uid not in users:
        users[uid] = {
            "username": username,
            "first_name": first_name,
            "first_seen": now,
            "last_seen": now
        }
        save_users(users)
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    else:
        users[uid]["username"] = username
        users[uid]["first_name"] = first_name
        users[uid]["last_seen"] = now
        save_users(users)

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name)

    keyboard = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É", callback_data="search_code")]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    users = load_users()
    await update.message.reply_text(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

async def list_films(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    films = load_films()
    if not films:
        await update.message.reply_text("üéû –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.")
        return
    txt = "\n".join([f"{k} ‚Äî {v.get('title')}" for k, v in sorted(films.items())])
    await update.message.reply_text("üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:\n\n" + txt)

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∫–æ–¥> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")

    code = args[0]
    if not code.isdigit() or not 3 <= len(code) <= 5:
        return await update.message.reply_text("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 5 —Ü–∏—Ñ—Ä!")

    films = load_films()
    if code in films:
        return await update.message.reply_text("–ö–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

    context.user_data["add_code"] = code
    context.user_data["add_title"] = " ".join(args[1:])
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞.")

async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    code = context.args[0]
    films = load_films()

    if code in films:
        films.pop(code)
        save_films(films)
        await update.message.reply_text("‚úÖ –£–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editn <–∫–æ–¥> <–Ω–æ–≤–æ–µ –∏–º—è>")

    code = args[0]
    new_title = " ".join(args[1:])
    films = load_films()

    if code not in films:
        return await update.message.reply_text("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    films[code]["title"] = new_title
    save_films(films)
    await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

async def edit_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    args = context.args
    if not args:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editm <–∫–æ–¥>")

    code = args[0]
    films = load_films()

    if code not in films:
        return await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    context.user_data["edit_code"] = code
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ.")

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    films = load_films()

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    code = context.user_data.get("edit_code")
    if code:
        file_id = update.message.video.file_id
        films[code]["file_id"] = file_id
        save_films(films)
        context.user_data.pop("edit_code")
        return await update.message.reply_text("‚úÖ –í–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
    code = context.user_data.get("add_code")
    title = context.user_data.get("add_title")
    if code and title:
        file_id = update.message.video.file_id
        films[code] = {"title": title, "file_id": file_id}
        save_films(films)
        context.user_data.clear()
        return await update.message.reply_text("‚úÖ –§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    add_user(update.effective_user.id, update.effective_user.username, update.effective_user.first_name)

    txt = update.message.text.strip()

    if not context.user_data.get("waiting_code"):
        kb = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É", callback_data="search_code")]]
        return await update.message.reply_text(
            "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞.",
            reply_markup=InlineKeyboardMarkup(kb)
        )

    if txt.isdigit() and 3 <= len(txt) <= 5:
        return await send_film_by_code(update, context, txt)
    elif txt.isdigit():
        return await update.message.reply_text("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 5 —Ü–∏—Ñ—Ä!")
    else:
        return await update.message.reply_text("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")

async def send_film_by_code(update, context, code):
    films = load_films()
    film = films.get(code)

    if not film:
        return await update.message.reply_text("–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    if "file_id" in film:
        await update.message.reply_video(video=film["file_id"], caption=film["title"])
    else:
        return await update.message.reply_text("‚ùå –£ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç —Ñ–∞–π–ª–∞.")

    context.user_data.pop("waiting_code", None)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    not_subscribed = []

    for chan, name in REQUIRED_CHANNELS:
        try:
            member = await context.bot.get_chat_member(chan, user_id)
            if member.status not in ("member", "administrator", "creator"):
                not_subscribed.append(name)
        except Exception:
            not_subscribed.append(name)

    buttons = [
        [InlineKeyboardButton(name, url=f"https://t.me/{chan[1:]}")]
        for chan, name in REQUIRED_CHANNELS
    ]
    buttons.append([InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribed")])
    markup = InlineKeyboardMarkup(buttons)

    if query.data == "search_code":
        if not_subscribed:
            return await query.message.reply_text(
                "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
                reply_markup=markup
            )
        else:
            context.user_data["waiting_code"] = True
            return await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (3‚Äì5 —Ü–∏—Ñ—Ä):")

    if query.data == "subscribed":
        if not_subscribed:
            return await query.message.reply_text("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å.")
        context.user_data["waiting_code"] = True
        return await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (3‚Äì5 —Ü–∏—Ñ—Ä):")

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–π suppression –æ—à–∏–±–æ–∫ ==========
async def global_error_handler(update, context):
    err = context.error
    if isinstance(err, Conflict):
        logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç polling –ø–æ–¥–∞–≤–ª–µ–Ω ‚Äî –≤—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω.")
        return
    logger.exception("‚ÄºÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", exc_info=err)

# ========== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ==========
def main():
    if not TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("list", list_films))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("del", del_command))
    app.add_handler(CommandHandler("editn", edit_name))
    app.add_handler(CommandHandler("editm", edit_media))
    app.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, handle_video))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(button_callback))

    # –ü–æ–¥–∞–≤–ª—è–µ–º Conflict –ø–æ–ª–Ω–æ—Å—Ç—å—é
    app.add_error_handler(global_error_handler)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling —Å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º Conflict).")

    try:
        app.run_polling()
    except Conflict:
        logger.warning("‚ö†Ô∏è –í—Ç–æ—Ä–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä polling ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
    except Exception as e:
        logger.exception("‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", exc_info=e)

if __name__ == "__main__":
    main()