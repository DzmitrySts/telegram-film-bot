#!/usr/bin/env python3
import os
import json
import logging
import base64
import requests
from pathlib import Path
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
TOKEN = os.environ.get("TELEGRAM_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
ADMIN_ID = int(os.environ.get("ADMIN_ID", "481076515"))
FILMS_FILE = "films.json"
GITHUB_REPO = os.environ.get("GITHUB_REPO")
GITHUB_BRANCH = os.environ.get("GITHUB_BRANCH", "main")
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8000))

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –†–∞–±–æ—Ç–∞ —Å films.json ==========
def load_films():
    try:
        p = Path(FILMS_FILE)
        if not p.exists():
            p.write_text("{}", encoding="utf-8")
            return {}
        with p.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è films.json")
        return {}

def save_films(films: dict):
    try:
        with open(FILMS_FILE, "w", encoding="utf-8") as f:
            json.dump(films, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ films.json")
    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –≤ GitHub
    try:
        commit_films_to_github()
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ films.json –Ω–∞ GitHub")

# ========== –ö–æ–º–º–∏—Ç –≤ GitHub ==========
def commit_films_to_github():
    if not all([GITHUB_REPO, GITHUB_TOKEN]):
        logger.debug("GitHub –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∫–æ–º–º–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return

    with open(FILMS_FILE, "r", encoding="utf-8") as f:
        content = f.read()

    url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{FILMS_FILE}?ref={GITHUB_BRANCH}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    r = requests.get(url, headers=headers)
    sha = r.json().get("sha") if r.status_code == 200 else None

    payload = {
        "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ films.json —á–µ—Ä–µ–∑ –±–æ—Ç",
        "content": base64.b64encode(content.encode()).decode(),
        "branch": GITHUB_BRANCH,
    }
    if sha:
        payload["sha"] = sha

    put_resp = requests.put(url, headers=headers, json=payload)
    if put_resp.status_code in (200, 201):
        logger.info("–ö–æ–º–º–∏—Ç films.json –Ω–∞ GitHub –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    else:
        logger.error("–û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ –Ω–∞ GitHub: %s", put_resp.text)

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–∂–º–∏ ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª –∏ –≤–≤–µ–¥–∏ –∫–æ–¥ (3‚Äì5 —Ü–∏—Ñ—Ä).", reply_markup=reply_markup
    )

async def list_films(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    films = load_films()
    if not films:
        await update.message.reply_text("üéû –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.")
        return
    lines = [f"{k} ‚Äî {v.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}" for k, v in films.items()]
    await update.message.reply_text("üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:\n\n" + "\n".join(lines))

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∫–æ–¥> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    code = args[0]
    title = " ".join(args[1:])
    context.user_data["add_code"] = code
    context.user_data["add_title"] = title
    await update.message.reply_text(f"–û–ö. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞: {title} (–∫–æ–¥ {code})")

async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        return
    code = args[0]
    films = load_films()
    if code in films:
        films.pop(code)
        save_films(films)
        await update.message.reply_text(f"–§–∏–ª—å–º —Å –∫–æ–¥–æ–º {code} —É–¥–∞–ª—ë–Ω ‚úÖ")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
