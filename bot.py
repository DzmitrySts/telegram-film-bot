import json
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "8295792965:AAFCOTaWj0vDhS1XfTP8MQ0Ip9gMundUxKw"
ADMIN_ID = 481076515
FILMS_FILE = "films.json"

logging.basicConfig(level=logging.INFO)

# === –ó–ê–ì–†–£–ó–ö–ê/–°–û–•–†–ê–ù–ï–ù–ò–ï –§–ò–õ–¨–ú–û–í ===
def load_films():
    try:
        with open(FILMS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_films(films):
    with open(FILMS_FILE, "w", encoding="utf-8") as f:
        json.dump(films, f, ensure_ascii=False, indent=2)

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 777), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ.",
        reply_markup=reply_markup
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    films = load_films()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
    if text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É":
        await update.message.reply_text("–í–≤–µ–¥–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (3‚Äì5 —Ü–∏—Ñ—Ä):")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –≤–≤–µ–¥—ë–Ω –∫–æ–¥
    if text.isdigit():
        if text in films:
            film = films[text]
            source = film.get("file_id") or film.get("url")
            caption = film.get("title", f"–§–∏–ª—å–º {text}")

            try:
                if source.startswith("http"):
                    await update.message.reply_video(video=source, caption=caption)
                else:
                    await update.message.reply_video(video=source, caption=caption)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞: {e}")
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text("–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢")
    else:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–¥ (3‚Äì5 —Ü–∏—Ñ—Ä).")

# === –ó–ê–ü–£–°–ö ===
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()