import os
import json
import re
import logging
from pathlib import Path
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏ –∞–¥–º–∏–Ω
TOKEN = "8295792965:AAFCOTaWj0vDhS1XfTP8MQ0Ip9gMundUxKw"  # –ø—Ä–∏–º–µ—Ä
ADMIN_ID = 481076515  # —Ç–≤–æ–π Telegram user_id
FILMS_PATH = Path("films.json")

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –∫–æ–¥–∞
CODE_RE = re.compile(r"^\d{3,5}$")

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤
def load_films():
    if FILMS_PATH.exists():
        return json.loads(FILMS_PATH.read_text(encoding="utf-8"))
    return {}

def save_films(data):
    FILMS_PATH.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")

FILMS = load_films()

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –∫–æ–¥ –∏–∑ 3‚Äì5 —Ü–∏—Ñ—Ä, —è –ø—Ä–∏—à–ª—é —Ñ–∏–ª—å–º üé¨")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–æ–¥—É
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not CODE_RE.match(text):
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ –∏–∑ 3‚Äì5 —Ü–∏—Ñ—Ä.")
        return
    film = FILMS.get(text)
    if not film:
        await update.message.reply_text("–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
        return
    title = film.get("title", "")
    ftype = film.get("type")
    source = film.get("source")
    caption = f"{title}".strip()
    try:
        if ftype == "url":
            await update.message.reply_text(f"{caption}\n{source}")
        elif ftype == "telegram_file":
            await context.bot.send_video(chat_id=update.effective_chat.id, video=source, caption=caption)
        elif ftype == "local":
            if Path(source).exists():
                with open(source, "rb") as f:
                    await context.bot.send_video(chat_id=update.effective_chat.id, video=InputFile(f), caption=caption)
            else:
                await update.message.reply_text("–§–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞
async def add_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∫–æ–¥> <—Ç–∏–ø:url|telegram_file|local> <—Å—Å—ã–ª–∫–∞> [–Ω–∞–∑–≤–∞–Ω–∏–µ]")
        return
    code, ftype, source = args[0], args[1], args[2]
    title = " ".join(args[3:]) if len(args) > 3 else ""
    FILMS[code] = {"title": title, "type": ftype, "source": source}
    save_films(FILMS)
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å–º {code} ({ftype})")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞
async def del_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å.")
        return
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del <–∫–æ–¥>")
        return
    code = args[0]
    if code in FILMS:
        FILMS.pop(code)
        save_films(FILMS)
        await update.message.reply_text(f"–ö–æ–¥ {code} —É–¥–∞–ª—ë–Ω ‚úÖ")
    else:
        await update.message.reply_text(f"–ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤
async def list_codes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not FILMS:
        await update.message.reply_text("–§–∏–ª—å–º—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return
    lines = [f"{k}: {v.get('title','')}" for k,v in FILMS.items()]
    await update.message.reply_text("\n".join(lines))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_code))
    app.add_handler(CommandHandler("list", list_codes))
    app.add_handler(CommandHandler("del", del_code))  # –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
