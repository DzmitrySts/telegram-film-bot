#!/usr/bin/env python3
import os
import json
import logging
import base64
import requests
from pathlib import Path
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
TOKEN = os.environ.get("TELEGRAM_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "481076515"))
FILMS_FILE = "films.json"

GITHUB_REPO = os.environ.get("GITHUB_REPO")
GITHUB_BRANCH = os.environ.get("GITHUB_BRANCH", "main")
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –†–∞–±–æ—Ç–∞ —Å JSON ==========
def load_films():
    try:
        p = Path(FILMS_FILE)
        if not p.exists():
            p.write_text("{}", encoding="utf-8")
            return {}
        with p.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è films.json")
        return {}

def save_films(films: dict):
    try:
        with open(FILMS_FILE, "w", encoding="utf-8") as f:
            json.dump(films, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ films.json")
        return
    commit_films_to_github()

def commit_films_to_github():
    if not all([GITHUB_REPO, GITHUB_TOKEN]):
        logger.warning("GitHub –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∫–æ–º–º–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return
    try:
        with open(FILMS_FILE, "r", encoding="utf-8") as f:
            content = f.read()
        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{FILMS_FILE}?ref={GITHUB_BRANCH}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        r = requests.get(url, headers=headers)
        sha = r.json().get("sha") if r.status_code == 200 else None
        payload = {
            "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ films.json —á–µ—Ä–µ–∑ –±–æ—Ç",
            "content": base64.b64encode(content.encode()).decode(),
            "branch": GITHUB_BRANCH,
        }
        if sha:
            payload["sha"] = sha
        put_resp = requests.put(url, headers=headers, json=payload)
        if put_resp.status_code in (200, 201):
            logger.info("‚úÖ –ö–æ–º–º–∏—Ç films.json –Ω–∞ GitHub –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ –Ω–∞ GitHub: %s", put_resp.text)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ films.json –Ω–∞ GitHub")

# ========== –ö–æ–º–∞–Ω–¥—ã ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–∂–º–∏ ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª –∏ –≤–≤–µ–¥–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (3‚Äì5 —Ü–∏—Ñ—Ä).",
        reply_markup=reply_markup
    )

async def list_films(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    films = load_films()
    if not films:
        await update.message.reply_text("üéû –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.")
        return

    sorted_films = dict(sorted(films.items(), key=lambda x: int(x[0])))
    lines = [f"{code} ‚Äî {data.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}" for code, data in sorted_films.items()]
    await update.message.reply_text("üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∫–æ–¥–∞):\n\n" + "\n".join(lines))

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∫–æ–¥> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    code = args[0]
    if not code.isdigit() or not (3 <= len(code) <= 5):
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3‚Äì5 —Ü–∏—Ñ—Ä.")
        return
    films = load_films()
    if code in films:
        await update.message.reply_text(f"‚ùå –ö–æ–¥ {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.")
        return
    title = " ".join(args[1:])
    context.user_data["add_code"] = code
    context.user_data["add_title"] = title
    await update.message.reply_text(f"–û–ö. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞: {title} (–∫–æ–¥ {code})")

async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        return
    code = args[0]
    films = load_films()
    if code in films:
        films.pop(code)
        save_films(films)
        await update.message.reply_text(f"–§–∏–ª—å–º —Å –∫–æ–¥–æ–º {code} —É–¥–∞–ª—ë–Ω ‚úÖ")

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editn <–∫–æ–¥> <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    code = args[0]
    new_title = " ".join(args[1:])
    films = load_films()
    if code not in films:
        await update.message.reply_text(f"‚ùå –ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    films[code]["title"] = new_title
    save_films(films)
    await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å –∫–æ–¥–æ–º {code} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_title}' ‚úÖ")

async def edit_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editm <–∫–æ–¥> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤–∏–¥–µ–æ.")
        return
    code = args[0]
    films = load_films()
    if code not in films:
        await update.message.reply_text(f"‚ùå –ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    context.user_data["edit_video_code"] = code
    await update.message.reply_text(f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è –∫–æ–¥–∞ {code}.")

# ========== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ==========
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ‚Äî –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
    if txt == "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É":
        context.user_data["waiting_code"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (3‚Äì5 —Ü–∏—Ñ—Ä):")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, –Ω–æ –≤–≤–æ–¥–∏—Ç —á—Ç–æ-—Ç–æ
    if not context.user_data.get("waiting_code"):
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞.")
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∏ —Ç–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏—Ç –∫–æ–¥
    if not txt.isdigit():
        await update.message.reply_text("‚ùå –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (3‚Äì5 —Ü–∏—Ñ—Ä).")
        return
    if not (3 <= len(txt) <= 5):
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3‚Äì5 —Ü–∏—Ñ—Ä.")
        return

    films = load_films()
    film = films.get(txt)
    if not film:
        await update.message.reply_text("üòï –§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.")
        return  # –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞

    # –ö–æ–¥ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
    context.user_data.pop("waiting_code", None)
    await send_film_by_code(update, context, txt)

async def send_film_by_code(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    films = load_films()
    film = films.get(code)
    if not film:
        await update.message.reply_text("üòï –§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    title = film.get("title", "")
    file_id = film.get("file_id")
    url = film.get("url")
    caption = title or f"–§–∏–ª—å–º {code}"
    try:
        if file_id:
            await update.message.reply_video(video=file_id, caption=caption)
        elif url:
            await update.message.reply_text(f"{caption}\n{url}")
        else:
            await update.message.reply_text("‚ùå –£ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    code = context.user_data.get("add_code")
    title = context.user_data.get("add_title")
    if code and title:
        file_id = None
        if update.message.video:
            file_id = update.message.video.file_id
        elif update.message.document and update.message.document.mime_type and "video" in update.message.document.mime_type:
            file_id = update.message.document.file_id
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª (MP4).")
            return
        films = load_films()
        films[code] = {"title": title, "file_id": file_id}
        save_films(films)
        await update.message.reply_text(f"–§–∏–ª—å–º '{title}' —Å –∫–æ–¥–æ–º {code} –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
        context.user_data.pop("add_code", None)
        context.user_data.pop("add_title", None)
        return

    edit_code = context.user_data.get("edit_video_code")
    if edit_code:
        file_id = None
        if update.message.video:
            file_id = update.message.video.file_id
        elif update.message.document and update.message.document.mime_type and "video" in update.message.document.mime_type:
            file_id = update.message.document.file_id
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª (MP4).")
            return
        films = load_films()
        films[edit_code]["file_id"] = file_id
        save_films(films)
        await update.message.reply_text(f"–í–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å –∫–æ–¥–æ–º {edit_code} –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        context.user_data.pop("edit_video_code", None)

# ========== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ==========
def main():
    if not TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_films))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("del", del_command))
    app.add_handler(CommandHandler("editn", edit_name))
    app.add_handler(CommandHandler("editm", edit_video))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, handle_video))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
