#!/usr/bin/env python3
import os
import json
import logging
import base64
import requests
import datetime
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
TOKEN = os.environ.get("TELEGRAM_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "481076515"))
FILMS_FILE = "films.json"
USERS_FILE = "users.json"

GITHUB_REPO = os.environ.get("GITHUB_REPO")
GITHUB_BRANCH = os.environ.get("GITHUB_BRANCH", "main")
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")

# –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª
REQUIRED_CHANNELS = [
    ("@offmatch", "Offmatch")
]

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –†–∞–±–æ—Ç–∞ —Å JSON-—Ñ–∞–π–ª–∞–º–∏ ==========
def load_json(filename):
    try:
        p = Path(filename)
        if not p.exists():
            p.write_text("{}", encoding="utf-8")
            return {}
        with p.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        logger.exception(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {filename}")
        return {}

def save_json(filename, data):
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {filename}")
        return
    commit_to_github(filename)

# ========== –ö–æ–º–º–∏—Ç –≤ GitHub ==========
def commit_to_github(filename):
    if not all([GITHUB_REPO, GITHUB_TOKEN]):
        logger.warning("GitHub –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∫–æ–º–º–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return
    try:
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read()

        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{filename}?ref={GITHUB_BRANCH}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}

        r = requests.get(url, headers=headers)
        sha = None
        if r.status_code == 200:
            sha = r.json().get("sha")

        payload = {
            "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {filename} —á–µ—Ä–µ–∑ –±–æ—Ç",
            "content": base64.b64encode(content.encode()).decode(),
            "branch": GITHUB_BRANCH,
        }
        if sha:
            payload["sha"] = sha

        put_resp = requests.put(url, headers=headers, json=payload)
        if put_resp.status_code in (200, 201):
            logger.info(f"‚úÖ –ö–æ–º–º–∏—Ç {filename} –Ω–∞ GitHub –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ –Ω–∞ GitHub: %s", put_resp.text)
    except Exception:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ {filename} –Ω–∞ GitHub")

# ========== –†–∞–±–æ—Ç–∞ —Å films.json ==========
def load_films():
    return load_json(FILMS_FILE)

def save_films(films: dict):
    save_json(FILMS_FILE, films)

# ========== –†–∞–±–æ—Ç–∞ —Å users.json ==========
def load_users():
    return load_json(USERS_FILE)

def save_users(users: dict):
    save_json(USERS_FILE, users)

def add_user(user_id, username=None, first_name=None):
    users = load_users()
    uid = str(user_id)
    now = datetime.datetime.now(datetime.timezone.utc).isoformat()
    if uid not in users:
        users[uid] = {
            "username": username,
            "first_name": first_name,
            "first_seen": now,
            "last_seen": now,
        }
        save_users(users)
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
    else:
        users[uid]["username"] = username
        users[uid]["first_name"] = first_name
        users[uid]["last_seen"] = now
        save_users(users)

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name)
    keyboard = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É", callback_data="search_code")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞.",
        reply_markup=reply_markup
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    users = load_users()
    await update.message.reply_text(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

async def list_films(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    films = load_films()
    if not films:
        await update.message.reply_text("üéû –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.")
        return
    lines = [f"{k} ‚Äî {v.get('title','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}" for k, v in sorted(films.items(), key=lambda x: x[0])]
    await update.message.reply_text("üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:\n\n" + "\n".join(lines))

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∫–æ–¥> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    code = args[0]
    if not code.isdigit() or not 3 <= len(code) <= 5:
        await update.message.reply_text("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 5 —Ü–∏—Ñ—Ä!")
        return
    films = load_films()
    if code in films:
        await update.message.reply_text(f"–ö–æ–¥ {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
    title = " ".join(args[1:])
    context.user_data["add_code"] = code
    context.user_data["add_title"] = title
    await update.message.reply_text(f"–û–ö. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞: {title} (–∫–æ–¥ {code})")

async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        return
    code = args[0]
    films = load_films()
    if code in films:
        films.pop(code)
        save_films(films)
        await update.message.reply_text(f"–§–∏–ª—å–º —Å –∫–æ–¥–æ–º {code} —É–¥–∞–ª—ë–Ω ‚úÖ")
    else:
        await update.message.reply_text(f"‚ùå –ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editn <–∫–æ–¥> <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    code = args[0]
    title = " ".join(args[1:])
    films = load_films()
    if code not in films:
        await update.message.reply_text(f"–ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    films[code]["title"] = title
    save_films(films)
    await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å –∫–æ–¥–æ–º {code} –∏–∑–º–µ–Ω–µ–Ω–æ ‚úÖ")

async def edit_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editm <–∫–æ–¥>")
        return
    code = args[0]
    films = load_films()
    if code not in films:
        await update.message.reply_text(f"‚ùå –ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å–º —á–µ—Ä–µ–∑ /add.")
        return
    context.user_data["edit_code"] = code
    await update.message.reply_text(
        f"–û–ö. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è —Ñ–∏–ª—å–º–∞ ¬´{films[code].get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}¬ª (–∫–æ–¥ {code})."
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    add_user(update.effective_user.id, update.effective_user.username, update.effective_user.first_name)

    txt = (update.message.text or "").strip()
    if not txt:
        return

    if not context.user_data.get("waiting_code"):
        keyboard = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É", callback_data="search_code")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞",
            reply_markup=reply_markup
        )
        return

    if txt.isdigit() and 3 <= len(txt) <= 5:
        await send_film_by_code(update, context, txt)
    elif txt.isdigit():
        await update.message.reply_text("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 5 —Ü–∏—Ñ—Ä!")
    else:
        await update.message.reply_text("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")

async def send_film_by_code(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    films = load_films()
    film = films.get(code)
    if not film:
        await update.message.reply_text("–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
        return

    title = film.get("title", "")
    file_id = film.get("file_id")
    url = film.get("url") or film.get("source")
    caption = title or f"–§–∏–ª—å–º {code}"

    try:
        if file_id:
            await update.message.reply_video(video=file_id, caption=caption)
        elif url:
            await update.message.reply_text(f"{caption}\n{url}")
        else:
            await update.message.reply_text("‚ùå –£ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏.")
        keyboard = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É", callback_data="search_code")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üé¨ –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º, –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª",
            reply_markup=reply_markup
        )
        context.user_data.pop("waiting_code", None)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    add_user(update.effective_user.id, update.effective_user.username, update.effective_user.first_name)

    if update.effective_user.id != ADMIN_ID:
        return

    films = load_films()
    edit_code = context.user_data.get("edit_code")
    if edit_code:
        if edit_code not in films:
            await update.message.reply_text("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏–ª—å–º –±—ã–ª —É–¥–∞–ª—ë–Ω.")
            context.user_data.pop("edit_code", None)
            return

        if update.message.video:
            file_id = update.message.video.file_id
        elif update.message.document and update.message.document.mime_type and "video" in update.message.document.mime_type:
            file_id = update.message.document.file_id
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª (MP4).")
            return

        films[edit_code]["file_id"] = file_id
        save_films(films)
        await update.message.reply_text(
            f"‚úÖ –í–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ ¬´{films[edit_code]['title']}¬ª (–∫–æ–¥ {edit_code}) –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
        )
        context.user_data.pop("edit_code", None)
        return

    add_code = context.user_data.get("add_code")
    title = context.user_data.get("add_title")
    if add_code and title:
        if update.message.video:
            file_id = update.message.video.file_id
        elif update.message.document and update.message.document.mime_type and "video" in update.message.document.mime_type:
            file_id = update.message.document.file_id
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª (MP4).")
            return
        films[add_code] = {"title": title, "file_id": file_id}
        save_films(films)
        await update.message.reply_text(f"–§–∏–ª—å–º '{title}' —Å –∫–æ–¥–æ–º {add_code} –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
        context.user_data.pop("add_code", None)
        context.user_data.pop("add_title", None)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    add_user(user.id, user.username, user.first_name)

    if query.data == "search_code":
        user_id = query.from_user.id
        not_subscribed = []
        for chan, name in REQUIRED_CHANNELS:
            try:
                chat_member = await context.bot.get_chat_member(chat_id=chan, user_id=user_id)
                if chat_member.status not in ("member", "administrator", "creator"):
                    not_subscribed.append(name)
            except Exception:
                not_subscribed.append(name)

        buttons = [
            [InlineKeyboardButton(name, url=f"https://t.me/{chan[1:] if chan.startswith('@') else chan}")]
            for chan, name in REQUIRED_CHANNELS
        ]
        buttons.append([InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="subscribed")])
        reply_markup = InlineKeyboardMarkup(buttons)

        if not_subscribed:
            await query.message.reply_text(
                "üì¢ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:",
                reply_markup=reply_markup
            )
        else:
            context.user_data["waiting_code"] = True
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (3‚Äì5 —Ü–∏—Ñ—Ä):")

    elif query.data == "subscribed":
        user_id = query.from_user.id
        not_subscribed = []
        for chan, name in REQUIRED_CHANNELS:
            try:
                chat_member = await context.bot.get_chat_member(chat_id=chan, user_id=user_id)
                if chat_member.status not in ("member", "administrator", "creator"):
                    not_subscribed.append(name)
            except Exception:
                not_subscribed.append(name)

        if not_subscribed:
            msg = "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª:\n" + "\n".join(f"‚Ä¢ {ch}" for ch in not_subscribed)
            await query.message.reply_text(msg)
            return

        context.user_data["waiting_code"] = True
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (3‚Äì5 —Ü–∏—Ñ—Ä):")

# ========== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ==========
def main():
    if not TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("list", list_films))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("del", del_command))
    app.add_handler(CommandHandler("editn", edit_name))
    app.add_handler(CommandHandler("editm", edit_media))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, handle_video))
    app.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ polling)")

    try:
        app.run_polling()
    except Exception as e:
        if "Conflict" in str(e):
            logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç polling: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç getUpdates. –≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.")
        else:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:")

if __name__ == "__main__":
    main()