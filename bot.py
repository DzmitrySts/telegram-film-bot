#!/usr/bin/env python3
import os
import json
import logging
import base64
import requests
from pathlib import Path
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
TOKEN = os.environ.get("TELEGRAM_TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID", "481076515"))
FILMS_FILE = "films.json"

GITHUB_REPO = os.environ.get("GITHUB_REPO")
GITHUB_BRANCH = os.environ.get("GITHUB_BRANCH", "main")
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN")

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ========== –†–∞–±–æ—Ç–∞ —Å films.json ==========
def load_films():
    try:
        p = Path(FILMS_FILE)
        if not p.exists():
            p.write_text("{}", encoding="utf-8")
            return {}
        with p.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è films.json")
        return {}

def save_films(films: dict):
    try:
        with open(FILMS_FILE, "w", encoding="utf-8") as f:
            json.dump(films, f, ensure_ascii=False, indent=2)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ films.json")
        return
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –Ω–∞ GitHub (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    try:
        commit_films_to_github()
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∫–æ–º–º–∏—Ç–∞ films.json –Ω–∞ GitHub")

# ========== –ö–æ–º–º–∏—Ç –≤ GitHub ==========
def commit_films_to_github():
    if not all([GITHUB_REPO, GITHUB_TOKEN]):
        logger.debug("GitHub –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –∫–æ–º–º–∏—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return
    try:
        with open(FILMS_FILE, "r", encoding="utf-8") as f:
            content = f.read()

        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{FILMS_FILE}?ref={GITHUB_BRANCH}"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}

        # –ü–æ–ª—É—á–∞–µ–º SHA, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        r = requests.get(url, headers=headers, timeout=10)
        sha = r.json().get("sha") if r.status_code == 200 else None

        payload = {
            "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ films.json —á–µ—Ä–µ–∑ –±–æ—Ç",
            "content": base64.b64encode(content.encode()).decode(),
            "branch": GITHUB_BRANCH,
        }
        if sha:
            payload["sha"] = sha

        put_resp = requests.put(url, headers=headers, json=payload, timeout=10)
        if put_resp.status_code in (200, 201):
            logger.info("‚úÖ –ö–æ–º–º–∏—Ç films.json –Ω–∞ GitHub –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ –Ω–∞ GitHub: %s", put_resp.text)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ films.json –Ω–∞ GitHub")

# ========== –£—Ç–∏–ª–∏—Ç—ã UI ==========
def inline_search_button():
    kb = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É", callback_data="search_code")]]
    return InlineKeyboardMarkup(kb)

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ‚Äî –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞.",
        reply_markup=inline_search_button(),
    )

# --- –ê–¥–º–∏–Ω: —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ) ---
async def list_films(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    films = load_films()
    if not films:
        await update.message.reply_text("üéû –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.")
        return
    lines = [f"{k} ‚Äî {films[k].get('title','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}" for k in sorted(films.keys())]
    await update.message.reply_text("üé¨ –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤:\n\n" + "\n".join(lines))

# --- –ê–¥–º–∏–Ω: –¥–æ–±–∞–≤–∏—Ç—å (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–¥+–Ω–∞–∑–≤–∞–Ω–∏–µ, –∂–¥–µ—Ç –≤–∏–¥–µ–æ) ---
async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add <–∫–æ–¥> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    code = args[0]
    if not code.isdigit() or not 3 <= len(code) <= 5:
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 3‚Äì5 —Ü–∏—Ñ—Ä.")
        return
    films = load_films()
    if code in films:
        await update.message.reply_text(f"‚ùå –ö–æ–¥ {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    title = " ".join(args[1:])
    context.user_data["add_code"] = code
    context.user_data["add_title"] = title
    await update.message.reply_text(f"–û–ö. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞: {title} (–∫–æ–¥ {code})")

# --- –ê–¥–º–∏–Ω: —É–¥–∞–ª–∏—Ç—å –∫–æ–¥ ---
async def del_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        return
    code = args[0]
    films = load_films()
    if code in films:
        films.pop(code)
        save_films(films)
        await update.message.reply_text(f"–§–∏–ª—å–º —Å –∫–æ–¥–æ–º {code} —É–¥–∞–ª—ë–Ω ‚úÖ")

# --- –ê–¥–º–∏–Ω: –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ ---
async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editn <–∫–æ–¥> <–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    code = args[0]
    new_title = " ".join(args[1:])
    films = load_films()
    if code not in films:
        await update.message.reply_text(f"–ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    films[code]["title"] = new_title
    save_films(films)
    await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å –∫–æ–¥–æ–º {code} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_title}' ‚úÖ")

# --- –ê–¥–º–∏–Ω: –∂–¥–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–¥–∞ (editm) ---
async def edit_movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /editm <–∫–æ–¥> ‚Äî –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º: –±–æ—Ç –∂–¥—ë—Ç —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∏—à–µ–¥—à–µ–µ –≤–∏–¥–µ–æ –∏ –∑–∞–º–µ–Ω–∏—Ç file_id.
    """
    if update.effective_user.id != ADMIN_ID:
        return
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /editm <–∫–æ–¥> ‚Äî –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ")
        return
    code = args[0]
    films = load_films()
    if code not in films:
        await update.message.reply_text(f"–ö–æ–¥ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return
    context.user_data["edit_code"] = code
    await update.message.reply_text(f"–û–∂–∏–¥–∞—é –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ '{films[code].get('title','(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)')}' (–∫–æ–¥ {code}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")

# ========== –ö–Ω–æ–ø–∫–∏ (inline) ==========
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞.
    –ü—Ä–∏ —ç—Ç–æ–º –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç *—Ç–µ–∫—Å—Ç* "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥..." –±–µ–∑ –∫–Ω–æ–ø–∫–∏.
    """
    query = update.callback_query
    await query.answer()
    if query.data == "search_code":
        context.user_data["waiting_code"] = True
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –í–í–ï–°–¢–ò –ö–û–î ‚Äî –±–µ–∑ –∫–Ω–æ–ø–∫–∏ (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ (3‚Äì5 —Ü–∏—Ñ—Ä):")

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫) ==========
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    if not txt:
        return

    waiting = context.user_data.get("waiting_code", False)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∫–Ω–æ–ø–∫–æ–π
    if not waiting:
        await update.message.reply_text(
            "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞.",
            reply_markup=inline_search_button(),
        )
        return

    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    # –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ 3..5
    if not txt.isdigit():
        await update.message.reply_text("‚ùå –î–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (3‚Äì5 —Ü–∏—Ñ—Ä). –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞:")
        return
    if not 3 <= len(txt) <= 5:
        await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 5 —Ü–∏—Ñ—Ä. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–Ω–æ–≤–∞:")
        return

    # –í–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º
    await send_film_by_code(update, context, txt)

# ========== –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–æ–¥—É ==========
async def send_film_by_code(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str):
    films = load_films()
    film = films.get(code)

    # –ï—Å–ª–∏ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º –∏ *–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º* (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∫–æ–¥)
    if not film:
        await update.message.reply_text("–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")
        # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_code=True (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∫–æ–¥ –±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏)
        context.user_data["waiting_code"] = True
        return

    # –§–∏–ª—å–º –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    title = film.get("title", "")
    file_id = film.get("file_id")
    url = film.get("url") or film.get("source")
    caption = title or f"–§–∏–ª—å–º {code}"

    try:
        if file_id:
            await update.message.reply_video(video=file_id, caption=caption)
        elif url:
            await update.message.reply_text(f"{caption}\n{url}")
        else:
            await update.message.reply_text("‚ùå –£ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏.")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–ª—å–º–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        # –ü–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è = False (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        context.user_data["waiting_code"] = False
        return

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –∏ –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
    await update.message.reply_text(
        "üé¨ –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º, –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É¬ª",
        reply_markup=inline_search_button(),
    )
    context.user_data["waiting_code"] = False

# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–¥–ª—è –∞–¥–º–∏–Ω–∞: /add –∏–ª–∏ /editm) ==========
async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–ª–∏ –º–µ–Ω—è—Ç—å –≤–∏–¥–µ–æ
    if update.effective_user.id != ADMIN_ID:
        return

    add_code = context.user_data.get("add_code")
    edit_code = context.user_data.get("edit_code")
    code = add_code or edit_code
    if not code:
        # –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    # –ü–æ–ª—É—á–∞–µ–º file_id –æ—Ç video –∏–ª–∏ document
    file_id = None
    if update.message.video:
        file_id = update.message.video.file_id
    elif update.message.document and getattr(update.message.document, "mime_type", ""):
        if "video" in update.message.document.mime_type:
            file_id = update.message.document.file_id

    if not file_id:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ (–∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–∞–π–ª/–¥–æ–∫—É–º–µ–Ω—Ç —Å mime_type video).")
        return

    films = load_films()

    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ /add ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∏–ª—å–º
    if add_code:
        title = context.user_data.get("add_title", "")
        # –∑–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–∫–∏: –µ—Å–ª–∏ –∫–æ–¥ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–∏–ª—Å—è ‚Äî –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
        if add_code in films:
            await update.message.reply_text(f"–ö–æ–¥ {add_code} —É–∂–µ –∑–∞–Ω—è—Ç ‚Äî –æ—Ç–º–µ–Ω—è—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.")
            context.user_data.pop("add_code", None)
            context.user_data.pop("add_title", None)
            return
        films[add_code] = {"title": title, "file_id": file_id}
        save_films(films)
        await update.message.reply_text(f"–§–∏–ª—å–º '{title}' —Å –∫–æ–¥–æ–º {add_code} –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
        context.user_data.pop("add_code", None)
        context.user_data.pop("add_title", None)
        return

    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ /editm ‚Äî –∑–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
    if edit_code:
        if edit_code not in films:
            await update.message.reply_text(f"–ö–æ–¥ {edit_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –û—Ç–º–µ–Ω–∞.")
            context.user_data.pop("edit_code", None)
            return
        films[edit_code]["file_id"] = file_id
        save_films(films)
        await update.message.reply_text(f"–í–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å–º–∞ {edit_code} –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
        context.user_data.pop("edit_code", None)
        return

# ========== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ==========
def main():
    if not TOKEN:
        logger.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback))

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –º–µ–Ω—é)
    app.add_handler(CommandHandler("list", list_films))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("del", del_command))
    app.add_handler(CommandHandler("editn", edit_name))
    app.add_handler(CommandHandler("editm", edit_movie))

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VIDEO | filters.Document.VIDEO, handle_video))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º *–≤ –º–µ–Ω—é* —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É /start (–æ–Ω–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–∞–∫ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ event loop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    menu_commands = [BotCommand("start", "–ù–∞—á–∞–ª–æ –∏ –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞")]
    # schedule coroutine to set commands when the app loop runs
    app.create_task(app.bot.set_my_commands(menu_commands))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()